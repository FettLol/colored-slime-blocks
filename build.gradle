plugins {
    id 'fabric-loom' version "${loom_version}"
    id 'maven-publish'
    id 'com.modrinth.minotaur' version '2.+'
    id 'com.matthewprenger.cursegradle' version '1.4.0'
}

version = project.mod_version
group = project.maven_group

base {
    archivesName = project.archives_base_name
}

fabricApi {
    configureDataGeneration {
        client = true
    }
}

dependencies {
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
    modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"
    modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"
}

processResources {
    // expand all properties from gradle.properties
    def stringProperties = providers.gradlePropertiesPrefixedBy('').get()
    inputs.properties(stringProperties)

    filesMatching(['*.mod.json', '*.mixins.json']) {
        expand(stringProperties) {
            escapeBackslash = true
        }
    }
}

tasks.withType(JavaCompile).configureEach {
    it.options.release = project.java_version as Integer
}

jar {
    inputs.property 'archivesName', project.base.archivesName

    from('LICENSE') {
        rename { "${it}_${inputs.properties.archivesName}" }
    }
}

publishing {
    publications {
        create('mavenJava', MavenPublication) {
            artifactId = project.archives_base_name
            from components.java
        }
    }
}

def toList = (String s) -> s.split(',').collect{ it.trim() }

def changelogMd = project.file('changelog.md').getText('UTF-8')
def minecraftVersions = toList(project.minecraft_versions)
def minecraftVersionRange = (minecraftVersions.size() == 1 ? minecraftVersions.last() : "${minecraftVersions.first()} - ${minecraftVersions.last()}")

modrinth {
    token = System.getenv("MODRINTH_TOKEN")
    projectId = project.modrinth_id
    versionName = 'v' + project.mod_version
    versionNumber = project.mod_version
    versionType = 'release'
    uploadFile = remapJar
    changelog = changelogMd
    gameVersions = minecraftVersions
    loaders = ['fabric']
    dependencies {
        toList(project.modrinth_dependencies).each { required.project(it) }
    }
}

curseforge {
    def token = System.getenv("CURSEFORGE_TOKEN")
    if (token != null) {
        apiKey = token
    }

    project {
        id = project.curseforge_id
        releaseType = "release"
        changelogType = "markdown"
        changelog = changelogMd

        addGameVersion 'Fabric'
        minecraftVersions.each { addGameVersion(it) }

        relations {
            toList(project.curseforge_dependencies).each { requiredDependency(it) }
        }
        mainArtifact(remapJar.archiveFile.get().asFile) {
            displayName = "[Fabric ${minecraftVersionRange}] ${project.mod_version}"
        }
        afterEvaluate {
            uploadTask.dependsOn("build")
        }
    }

    options {
        forgeGradleIntegration = false
        javaVersionAutoDetect = false
    }
}
